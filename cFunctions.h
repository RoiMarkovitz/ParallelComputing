#pragma once

#define NUM_LETTERS 26
#define MAX_LETTERS_SEQ1 3000
#define MAX_LETTERS_SEQ2 2000
#define BUFF_SIZE 1 << 20
#define NUM_OF_ATTRIBUTES 3

typedef struct alignment_score
{
    int score;
    int offset;
    int mutant_lvl;
   
} AlignmentScore;
          
enum signs{DOLLAR, PERCENT, NUMBER, SPACE, NUM_SIGNS};

const int SIGNS_MATCH_MATRIX[NUM_LETTERS][NUM_LETTERS] {
{DOLLAR, SPACE, NUMBER, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, PERCENT, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE},
{SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{NUMBER, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, DOLLAR, PERCENT, SPACE, NUMBER, NUMBER, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, PERCENT, DOLLAR, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, NUMBER, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, NUMBER, PERCENT, SPACE, SPACE, PERCENT, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, PERCENT, SPACE, PERCENT, SPACE},
{NUMBER, SPACE, SPACE, NUMBER, SPACE, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, NUMBER, NUMBER, NUMBER, SPACE, DOLLAR, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, DOLLAR, SPACE, SPACE, PERCENT, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, NUMBER, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, DOLLAR, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, PERCENT, NUMBER, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, DOLLAR, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, PERCENT, PERCENT, SPACE, NUMBER, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, DOLLAR, SPACE, SPACE, PERCENT, NUMBER, NUMBER, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, SPACE, NUMBER, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, PERCENT, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, DOLLAR, PERCENT, NUMBER, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{PERCENT, SPACE, NUMBER, NUMBER, NUMBER, SPACE, NUMBER, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, NUMBER, SPACE, NUMBER, NUMBER, SPACE, DOLLAR, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE},
{PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, NUMBER, SPACE, NUMBER, SPACE, SPACE, PERCENT, DOLLAR, SPACE, NUMBER, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE, SPACE},
{NUMBER, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, SPACE, PERCENT, SPACE, SPACE, PERCENT, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, NUMBER, SPACE, DOLLAR, SPACE, SPACE, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, PERCENT, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR, SPACE, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, PERCENT, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, PERCENT, SPACE, DOLLAR, SPACE},
{SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, SPACE, DOLLAR}
};

int readInputFromFile(char*** work_arr, AlignmentScore** best_scores, int* weights, char** seq1, int* num_of_sequences, int** work_array_sizes, int* work_arr_size, int num_procs, int my_rank);
void captalizeLetters(char* string);
void calculateNumWorks(int* work_arr_size, int num_of_sequences, int num_procs, int my_rank);
void calculateArrayWorksSizes(int* work_array_sizes, int num_of_sequences, int num_procs);
int initAlignmentScoreArray(AlignmentScore** score_array, int** score_array_sizes, char** work_arr, char* seq1, int work_arr_size, int* score_array_total_size);
int initWorkerProcessesArrays(char*** work_arr, int work_arr_size, AlignmentScore** best_scores);
int initBestScores(AlignmentScore** best_scores, int work_arr_size);
void zeroAlignmentScores(AlignmentScore* best_scores, int work_arr_size);
void serialAlignmentScoreAlgorithm(char* seq1, char* seq2, AlignmentScore* result, int* weights);
void parallelThreadsAlignmentScoreAlgorithm(char* seq1, char** work_arr, AlignmentScore* results, int* weights, int work_arr_size);
void printResults(AlignmentScore* all_results, int size);
int startCudaAlignmentScoreCalculation(char** work_arr, int work_arr_size, char* seq1, int* weights, AlignmentScore* score_array, int* score_array_sizes, int score_array_total_size);
void findBestScoresParallel(AlignmentScore* best_scores, AlignmentScore* score_array, int* score_array_sizes, int work_arr_size);
void updateBestScores(AlignmentScore* best_scores, int score, int offset, int mutant_lvl);
void freeWorkerMemory(char** work_arr, int work_arr_size, char* seq1, AlignmentScore* best_scores);
void freeRootMemory(char** work_arr, int work_arr_size, char* seq1, AlignmentScore* best_scores, int* work_array_sizes, AlignmentScore* score_array, int* score_array_sizes); 